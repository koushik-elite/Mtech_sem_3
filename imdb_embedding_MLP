{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "aca13c1d",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-03T11:23:43.412095Z",
     "iopub.status.busy": "2025-08-03T11:23:43.411854Z",
     "iopub.status.idle": "2025-08-03T11:23:44.826450Z",
     "shell.execute_reply": "2025-08-03T11:23:44.825655Z"
    },
    "papermill": {
     "duration": 1.419783,
     "end_time": "2025-08-03T11:23:44.827684",
     "exception": false,
     "start_time": "2025-08-03T11:23:43.407901",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/imdb-dataset-of-50k-movie-reviews/IMDB Dataset.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "df533311",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T11:23:44.834659Z",
     "iopub.status.busy": "2025-08-03T11:23:44.833959Z",
     "iopub.status.idle": "2025-08-03T11:23:46.222487Z",
     "shell.execute_reply": "2025-08-03T11:23:46.221915Z"
    },
    "papermill": {
     "duration": 1.393179,
     "end_time": "2025-08-03T11:23:46.223932",
     "exception": false,
     "start_time": "2025-08-03T11:23:44.830753",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "df = pd.read_csv(\"/kaggle/input/imdb-dataset-of-50k-movie-reviews/IMDB Dataset.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e02f8805",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T11:23:46.230182Z",
     "iopub.status.busy": "2025-08-03T11:23:46.229945Z",
     "iopub.status.idle": "2025-08-03T11:23:46.253299Z",
     "shell.execute_reply": "2025-08-03T11:23:46.252781Z"
    },
    "papermill": {
     "duration": 0.027494,
     "end_time": "2025-08-03T11:23:46.254343",
     "exception": false,
     "start_time": "2025-08-03T11:23:46.226849",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "sentences = df['review'].tolist()\n",
    "labels = df['sentiment'].apply(lambda x: 1 if x == 'positive' else 0).tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1fd12a60",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T11:23:46.259822Z",
     "iopub.status.busy": "2025-08-03T11:23:46.259626Z",
     "iopub.status.idle": "2025-08-03T11:23:46.265243Z",
     "shell.execute_reply": "2025-08-03T11:23:46.264683Z"
    },
    "papermill": {
     "duration": 0.009508,
     "end_time": "2025-08-03T11:23:46.266286",
     "exception": false,
     "start_time": "2025-08-03T11:23:46.256778",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "labels[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "96d566fe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T11:23:46.272461Z",
     "iopub.status.busy": "2025-08-03T11:23:46.271826Z",
     "iopub.status.idle": "2025-08-03T11:24:05.691101Z",
     "shell.execute_reply": "2025-08-03T11:24:05.690163Z"
    },
    "papermill": {
     "duration": 19.423514,
     "end_time": "2025-08-03T11:24:05.692392",
     "exception": false,
     "start_time": "2025-08-03T11:23:46.268878",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-03 11:23:47.765344: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1754220227.939048      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1754220227.993340      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "124253\n"
     ]
    }
   ],
   "source": [
    "\n",
    "from tensorflow.keras.preprocessing.text import Tokenizer\n",
    "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
    "tokenizer = Tokenizer(oov_token=\"<OOV>\")\n",
    "tokenizer.fit_on_texts(sentences)\n",
    "\n",
    "word_index = tokenizer.word_index\n",
    "print(len(word_index))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "cfb33eb8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T11:24:05.698987Z",
     "iopub.status.busy": "2025-08-03T11:24:05.698518Z",
     "iopub.status.idle": "2025-08-03T11:24:05.701830Z",
     "shell.execute_reply": "2025-08-03T11:24:05.701295Z"
    },
    "papermill": {
     "duration": 0.007599,
     "end_time": "2025-08-03T11:24:05.702901",
     "exception": false,
     "start_time": "2025-08-03T11:24:05.695302",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# word_index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "230e4d2d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T11:24:05.708802Z",
     "iopub.status.busy": "2025-08-03T11:24:05.708557Z",
     "iopub.status.idle": "2025-08-03T11:24:09.519653Z",
     "shell.execute_reply": "2025-08-03T11:24:09.519050Z"
    },
    "papermill": {
     "duration": 3.81552,
     "end_time": "2025-08-03T11:24:09.521003",
     "exception": false,
     "start_time": "2025-08-03T11:24:05.705483",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# print(word_index)\n",
    "sequences = tokenizer.texts_to_sequences(sentences)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "42a22d36",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T11:24:09.528061Z",
     "iopub.status.busy": "2025-08-03T11:24:09.527407Z",
     "iopub.status.idle": "2025-08-03T11:24:09.533311Z",
     "shell.execute_reply": "2025-08-03T11:24:09.532750Z"
    },
    "papermill": {
     "duration": 0.010436,
     "end_time": "2025-08-03T11:24:09.534341",
     "exception": false,
     "start_time": "2025-08-03T11:24:09.523905",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[4,\n",
       " 394,\n",
       " 121,\n",
       " 354,\n",
       " 8,\n",
       " 8,\n",
       " 2,\n",
       " 1386,\n",
       " 2978,\n",
       " 7,\n",
       " 53,\n",
       " 17950,\n",
       " 53,\n",
       " 156,\n",
       " 56,\n",
       " 2382,\n",
       " 1583,\n",
       " 3,\n",
       " 412,\n",
       " 4,\n",
       " 13284,\n",
       " 3,\n",
       " 531,\n",
       " 26560,\n",
       " 283,\n",
       " 5,\n",
       " 1848,\n",
       " 6,\n",
       " 2,\n",
       " 439,\n",
       " 413,\n",
       " 8,\n",
       " 8,\n",
       " 2,\n",
       " 151,\n",
       " 24,\n",
       " 569,\n",
       " 70,\n",
       " 2275,\n",
       " 499,\n",
       " 4572,\n",
       " 22,\n",
       " 62,\n",
       " 46,\n",
       " 190,\n",
       " 30,\n",
       " 2,\n",
       " 71840,\n",
       " 19,\n",
       " 29,\n",
       " 46,\n",
       " 30,\n",
       " 2,\n",
       " 2295,\n",
       " 176,\n",
       " 3337,\n",
       " 97,\n",
       " 23,\n",
       " 68,\n",
       " 372,\n",
       " 64,\n",
       " 2,\n",
       " 13741,\n",
       " 792,\n",
       " 9720,\n",
       " 32,\n",
       " 2,\n",
       " 1826,\n",
       " 6,\n",
       " 12145,\n",
       " 7367,\n",
       " 6595,\n",
       " 22,\n",
       " 62,\n",
       " 7,\n",
       " 10,\n",
       " 70,\n",
       " 279,\n",
       " 2,\n",
       " 148,\n",
       " 19,\n",
       " 10,\n",
       " 7,\n",
       " 4,\n",
       " 38711,\n",
       " 408,\n",
       " 3,\n",
       " 2407,\n",
       " 413,\n",
       " 4,\n",
       " 4340,\n",
       " 354,\n",
       " 43,\n",
       " 28,\n",
       " 5,\n",
       " 2,\n",
       " 79,\n",
       " 16061,\n",
       " 5,\n",
       " 203,\n",
       " 3,\n",
       " 25,\n",
       " 115,\n",
       " 8,\n",
       " 8,\n",
       " 2,\n",
       " 1848,\n",
       " 63,\n",
       " 271,\n",
       " 345,\n",
       " 17,\n",
       " 2,\n",
       " 121,\n",
       " 178,\n",
       " 2,\n",
       " 1030,\n",
       " 5,\n",
       " 2,\n",
       " 2925,\n",
       " 61,\n",
       " 249,\n",
       " 72,\n",
       " 357,\n",
       " 2,\n",
       " 2207,\n",
       " 56312,\n",
       " 3128,\n",
       " 1290,\n",
       " 1193,\n",
       " 92,\n",
       " 4912,\n",
       " 10,\n",
       " 298,\n",
       " 21,\n",
       " 261,\n",
       " 1831,\n",
       " 3,\n",
       " 261,\n",
       " 4593,\n",
       " 584,\n",
       " 17,\n",
       " 2,\n",
       " 135,\n",
       " 3691,\n",
       " 18881,\n",
       " 3,\n",
       " 26561,\n",
       " 3,\n",
       " 2,\n",
       " 731,\n",
       " 584,\n",
       " 5,\n",
       " 66,\n",
       " 1055,\n",
       " 17,\n",
       " 71841,\n",
       " 48044,\n",
       " 27895,\n",
       " 171,\n",
       " 2298,\n",
       " 24,\n",
       " 1978,\n",
       " 70,\n",
       " 222]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sequences[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f9e5a1fb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T11:24:09.540556Z",
     "iopub.status.busy": "2025-08-03T11:24:09.540378Z",
     "iopub.status.idle": "2025-08-03T11:24:09.543492Z",
     "shell.execute_reply": "2025-08-03T11:24:09.542928Z"
    },
    "papermill": {
     "duration": 0.007556,
     "end_time": "2025-08-03T11:24:09.544708",
     "exception": false,
     "start_time": "2025-08-03T11:24:09.537152",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "vocab_size = int(len(word_index))\n",
    "embedding_dim = 256\n",
    "max_length = 40"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "088761cb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T11:24:09.550922Z",
     "iopub.status.busy": "2025-08-03T11:24:09.550384Z",
     "iopub.status.idle": "2025-08-03T11:24:10.284719Z",
     "shell.execute_reply": "2025-08-03T11:24:10.283934Z"
    },
    "papermill": {
     "duration": 0.738599,
     "end_time": "2025-08-03T11:24:10.285950",
     "exception": false,
     "start_time": "2025-08-03T11:24:09.547351",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/embedding.py:90: UserWarning: Argument `input_length` is deprecated. Just remove it.\n",
      "  warnings.warn(\n",
      "I0000 00:00:1754220250.209859      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n"
     ]
    }
   ],
   "source": [
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Embedding, Dense\n",
    "import tensorflow as tf\n",
    "\n",
    "model = tf.keras.Sequential([\n",
    "    tf.keras.layers.Embedding(vocab_size, embedding_dim, input_length=max_length),\n",
    "    tf.keras.layers.Bidirectional(tf.keras.layers.GRU(32)),\n",
    "    #tf.keras.layers.Flatten(),\n",
    "    tf.keras.layers.Dense(6, activation='relu'),\n",
    "    #tf.keras.layers.Dense(128, activation='relu'),\n",
    "    tf.keras.layers.Dense(1, activation='sigmoid')\n",
    "])\n",
    "model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\n",
    "#model.summary()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "505432aa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T11:24:10.293254Z",
     "iopub.status.busy": "2025-08-03T11:24:10.293024Z",
     "iopub.status.idle": "2025-08-03T11:24:11.571884Z",
     "shell.execute_reply": "2025-08-03T11:24:11.571307Z"
    },
    "papermill": {
     "duration": 1.283206,
     "end_time": "2025-08-03T11:24:11.572909",
     "exception": false,
     "start_time": "2025-08-03T11:24:10.289703",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"sequential\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">40</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)        │    <span style=\"color: #00af00; text-decoration-color: #00af00\">31,808,768</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ bidirectional (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Bidirectional</span>)   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">55,680</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">6</span>)              │           <span style=\"color: #00af00; text-decoration-color: #00af00\">390</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)              │             <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m40\u001b[0m, \u001b[38;5;34m256\u001b[0m)        │    \u001b[38;5;34m31,808,768\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ bidirectional (\u001b[38;5;33mBidirectional\u001b[0m)   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │        \u001b[38;5;34m55,680\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense (\u001b[38;5;33mDense\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m6\u001b[0m)              │           \u001b[38;5;34m390\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)              │             \u001b[38;5;34m7\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">31,864,845</span> (121.55 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m31,864,845\u001b[0m (121.55 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">31,864,845</span> (121.55 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m31,864,845\u001b[0m (121.55 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model.build(input_shape=(None, max_length))\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "36113bd1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T11:24:11.580515Z",
     "iopub.status.busy": "2025-08-03T11:24:11.580029Z",
     "iopub.status.idle": "2025-08-03T11:24:16.079341Z",
     "shell.execute_reply": "2025-08-03T11:24:16.078746Z"
    },
    "papermill": {
     "duration": 4.504404,
     "end_time": "2025-08-03T11:24:16.080646",
     "exception": false,
     "start_time": "2025-08-03T11:24:11.576242",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "training_size = 40000\n",
    "training_sentences = sentences[0:training_size]\n",
    "testing_sentences = sentences[training_size:]\n",
    "training_labels = labels[0:training_size]\n",
    "testing_labels = labels[training_size:]\n",
    "\n",
    "training_padded = pad_sequences(tokenizer.texts_to_sequences(training_sentences),maxlen=max_length, padding='post', truncating='post')\n",
    "testing_padded = pad_sequences(tokenizer.texts_to_sequences(testing_sentences),maxlen=max_length, padding='post', truncating='post')\n",
    "\n",
    "training_padded = np.array(training_padded)\n",
    "training_labels = np.array(training_labels)\n",
    "testing_padded = np.array(testing_padded)\n",
    "testing_labels = np.array(testing_labels)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "fa5392fc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T11:24:16.088214Z",
     "iopub.status.busy": "2025-08-03T11:24:16.088007Z",
     "iopub.status.idle": "2025-08-03T11:24:16.092215Z",
     "shell.execute_reply": "2025-08-03T11:24:16.091668Z"
    },
    "papermill": {
     "duration": 0.009048,
     "end_time": "2025-08-03T11:24:16.093247",
     "exception": false,
     "start_time": "2025-08-03T11:24:16.084199",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(40000, 40)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "training_padded.shape\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "fd53dd78",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T11:24:16.100683Z",
     "iopub.status.busy": "2025-08-03T11:24:16.100120Z",
     "iopub.status.idle": "2025-08-03T11:24:16.104076Z",
     "shell.execute_reply": "2025-08-03T11:24:16.103534Z"
    },
    "papermill": {
     "duration": 0.008555,
     "end_time": "2025-08-03T11:24:16.105007",
     "exception": false,
     "start_time": "2025-08-03T11:24:16.096452",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10000, 40)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "testing_padded.shape\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "e909b8b0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T11:24:16.112244Z",
     "iopub.status.busy": "2025-08-03T11:24:16.111856Z",
     "iopub.status.idle": "2025-08-03T11:27:25.119845Z",
     "shell.execute_reply": "2025-08-03T11:27:25.119269Z"
    },
    "papermill": {
     "duration": 189.012821,
     "end_time": "2025-08-03T11:27:25.121052",
     "exception": false,
     "start_time": "2025-08-03T11:24:16.108231",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1754220259.759212      58 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m1250/1250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 15ms/step - accuracy: 0.6689 - loss: 0.5769 - val_accuracy: 0.7828 - val_loss: 0.4562\n",
      "Epoch 2/10\n",
      "\u001b[1m1250/1250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 15ms/step - accuracy: 0.8709 - loss: 0.3047 - val_accuracy: 0.7792 - val_loss: 0.4777\n",
      "Epoch 3/10\n",
      "\u001b[1m1250/1250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 15ms/step - accuracy: 0.9479 - loss: 0.1320 - val_accuracy: 0.7682 - val_loss: 0.6883\n",
      "Epoch 4/10\n",
      "\u001b[1m1250/1250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 15ms/step - accuracy: 0.9807 - loss: 0.0478 - val_accuracy: 0.7597 - val_loss: 1.0231\n",
      "Epoch 5/10\n",
      "\u001b[1m1250/1250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 15ms/step - accuracy: 0.9938 - loss: 0.0173 - val_accuracy: 0.7497 - val_loss: 1.3609\n",
      "Epoch 6/10\n",
      "\u001b[1m1250/1250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 15ms/step - accuracy: 0.9971 - loss: 0.0087 - val_accuracy: 0.7550 - val_loss: 1.5941\n",
      "Epoch 7/10\n",
      "\u001b[1m1250/1250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 15ms/step - accuracy: 0.9981 - loss: 0.0054 - val_accuracy: 0.7551 - val_loss: 1.6279\n",
      "Epoch 8/10\n",
      "\u001b[1m1250/1250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 15ms/step - accuracy: 0.9984 - loss: 0.0048 - val_accuracy: 0.7480 - val_loss: 1.8115\n",
      "Epoch 9/10\n",
      "\u001b[1m1250/1250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 15ms/step - accuracy: 0.9987 - loss: 0.0035 - val_accuracy: 0.7557 - val_loss: 1.9284\n",
      "Epoch 10/10\n",
      "\u001b[1m1250/1250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 15ms/step - accuracy: 0.9994 - loss: 0.0020 - val_accuracy: 0.7483 - val_loss: 1.9351\n"
     ]
    }
   ],
   "source": [
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "\n",
    "early_stopping = EarlyStopping(monitor='val_loss', patience=10, min_delta=0.01)\n",
    "\n",
    "num_epochs = 10\n",
    "history = model.fit(training_padded, training_labels, epochs=num_epochs, validation_data=(testing_padded, testing_labels), callbacks=[early_stopping])"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 134715,
     "sourceId": 320111,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 229.232937,
   "end_time": "2025-08-03T11:27:28.721904",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-03T11:23:39.488967",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
